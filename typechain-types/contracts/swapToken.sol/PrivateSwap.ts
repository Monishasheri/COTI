/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ItUint64Struct = { ciphertext: BigNumberish; signature: BytesLike };

export type ItUint64StructOutput = [ciphertext: bigint, signature: string] & {
  ciphertext: bigint;
  signature: string;
};

export interface PrivateSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "ctOutputB"
      | "getUserReserves"
      | "reserve1"
      | "reserve2"
      | "swap"
      | "tokenA"
      | "tokenB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [ItUint64Struct, ItUint64Struct]
  ): string;
  encodeFunctionData(functionFragment: "ctOutputB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve1", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserve2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [ItUint64Struct]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ctOutputB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
}

export interface PrivateSwap extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateSwap;
  waitForDeployment(): Promise<this>;

  interface: PrivateSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [amountA: ItUint64Struct, amountB: ItUint64Struct],
    [void],
    "nonpayable"
  >;

  ctOutputB: TypedContractMethod<[], [bigint], "view">;

  getUserReserves: TypedContractMethod<[], [[bigint, bigint]], "nonpayable">;

  reserve1: TypedContractMethod<[], [bigint], "view">;

  reserve2: TypedContractMethod<[], [bigint], "view">;

  swap: TypedContractMethod<[inputA: ItUint64Struct], [void], "nonpayable">;

  tokenA: TypedContractMethod<[], [string], "view">;

  tokenB: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [amountA: ItUint64Struct, amountB: ItUint64Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ctOutputB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserReserves"
  ): TypedContractMethod<[], [[bigint, bigint]], "nonpayable">;
  getFunction(
    nameOrSignature: "reserve1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserve2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<[inputA: ItUint64Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenB"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
