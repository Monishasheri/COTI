/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ItUint64Struct = { ciphertext: BigNumberish; signature: BytesLike };

export type ItUint64StructOutput = [ciphertext: bigint, signature: string] & {
  ciphertext: bigint;
  signature: string;
};

export interface PrivateStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "addResult"
      | "ctOutputB"
      | "privateNumber"
      | "reserve1"
      | "reserve2"
      | "setPrivateNumber"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [ItUint64Struct, ItUint64Struct]
  ): string;
  encodeFunctionData(functionFragment: "addResult", values?: undefined): string;
  encodeFunctionData(functionFragment: "ctOutputB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privateNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve1", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserve2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPrivateNumber",
    values: [ItUint64Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [ItUint64Struct]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ctOutputB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export interface PrivateStorage extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateStorage;
  waitForDeployment(): Promise<this>;

  interface: PrivateStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [value1: ItUint64Struct, value2: ItUint64Struct],
    [void],
    "nonpayable"
  >;

  addResult: TypedContractMethod<[], [bigint], "view">;

  ctOutputB: TypedContractMethod<[], [bigint], "view">;

  privateNumber: TypedContractMethod<[], [bigint], "view">;

  reserve1: TypedContractMethod<[], [bigint], "view">;

  reserve2: TypedContractMethod<[], [bigint], "view">;

  setPrivateNumber: TypedContractMethod<
    [value: ItUint64Struct],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<[inputA: ItUint64Struct], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [value1: ItUint64Struct, value2: ItUint64Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ctOutputB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "privateNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserve1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserve2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPrivateNumber"
  ): TypedContractMethod<[value: ItUint64Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<[inputA: ItUint64Struct], [void], "nonpayable">;

  filters: {};
}
